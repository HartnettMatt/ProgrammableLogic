
X:/Graduate/ECEN5863/ProgrammableLogic/Homework3Practical/Problem2/Part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
/* Program that finds the largest number in a list of integers */
        .text
        .global _start
_start:
        LDR R4, =RESULT         // R4 points to result location
   0:	e59f405c 	ldr	r4, [pc, #92]	; 64 <NUMBERS+0x1c>
        LDR R2, [R4, #4]        // R2 holds the number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
        ADD R3, R4, #8          // R3 points to the first number
   8:	e2843008 	add	r3, r4, #8
        BL LARGE                // Call to the subroutine LARGE
   c:	eb000000 	bl	14 <LARGE>

00000010 <END>:
        
END:    B END
  10:	eafffffe 	b	10 <END>

00000014 <LARGE>:
        
LARGE:                          // Subroutine to find the largest number
        LDR R0, [R3]            // R0 holds the largest number so far
  14:	e5930000 	ldr	r0, [r3]

00000018 <LOOP>:
LOOP:   SUBS R2, R2, #1         // decrement the loop counter
  18:	e2522001 	subs	r2, r2, #1
        BEQ DONE
  1c:	0a000005 	beq	38 <DONE>
        ADD R3, R3, #4
  20:	e2833004 	add	r3, r3, #4
        LDR R1, [R3]            // get the next number
  24:	e5931000 	ldr	r1, [r3]
        CMP R0, R1              // check if larger number found
  28:	e1500001 	cmp	r0, r1
        BGE LOOP
  2c:	aafffff9 	bge	18 <LOOP>
        MOV R0, R1              // update the largerst number
  30:	e1a00001 	mov	r0, r1
        B LOOP
  34:	eafffff7 	b	18 <LOOP>

00000038 <DONE>:
DONE:   STR R0, [R4]            // store largest number into result location
  38:	e5840000 	str	r0, [r4]
        MOV PC, LR                     // Return to calling program
  3c:	e1a0f00e 	mov	pc, lr

00000040 <RESULT>:
  40:	00000000 	.word	0x00000000

00000044 <N>:
  44:	00000007 	.word	0x00000007

00000048 <NUMBERS>:
  48:	00000004 	.word	0x00000004
  4c:	00000005 	.word	0x00000005
  50:	00000003 	.word	0x00000003
  54:	00000006 	.word	0x00000006
  58:	00000001 	.word	0x00000001
  5c:	00000008 	.word	0x00000008
  60:	00000002 	.word	0x00000002
  64:	00000040 	.word	0x00000040
